
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts
 *  is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)

// see https://docs.huff.sh/get-started/huff-by-example/#constants
#define constant STORAGE_0 = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
    // function selectors
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(store) eq store_func jumpi
         __FUNC_SIG(read)  eq read_func  jumpi

    // unrecognized function
    0x00 0x00 revert

    store_func:
        0x04 calldataload   // [v]
        [STORAGE_0]         // [s, v]
        sstore              // []     store[s] := v
        0x00 0x00 return

    read_func:
        [STORAGE_0]         // [s]
        sload               // [v]    v := store[s]
        0x00 mstore
        0x20 0x00 return
        
        
}