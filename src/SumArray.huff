
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that 
 *  takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function sumArray(uint256[]) payable returns(uint256)

// similar to strings, arrays are stored by offset-length-elements
// offset points to length, and length is followed by "length" many values
// that make up the array

#define macro MAIN() = takes(0) returns(0) {
    // function selectors
    0x00 calldataload 0xE0 shr
    __FUNC_SIG(sumArray) eq continue jumpi

    // unrecognized function
    0x00 0x00 revert

    continue:

    // we expect a single array, no need to check for offset
    // we know that the array length is at 0x24
    0x24 calldataload   // [l]

    0x00       // [l, i]       i := index
    0x00       // [l, i, s]    s := sum
    for_loop_begin:
               // [l, i, s]

        // loop condition (i < l)
        dup3   // [l, i, s, l]
        dup3   // [l, i, s, l, i]
        lt     // [l, i, s, i < l]
        iszero // [l, i, s, i >= l]
        for_loop_end jumpi

        // compute memory index
        0x44   // [l, i, s, 0x44]
        dup3   // [l, i, s, 0x44, i]
        0x20   // [l, i, s, 0x44, i, 0x20]
        mul    // [l, i, s, 0x44, i * 0x20]
        add    // [l, i, s, k]    k := 0x44 + (i * 0x20)

        // add array element to sum
        calldataload // [l, i, s, arr[i]]
        add          // [l, i, s']    s' := s + arr[i]

        // increment index
        swap1        // [l, s', i]
        0x01         // [l, s', i, 1]
        add          // [l, s', i']    i' := i + 1
        swap1        // [l, i', s']
    for_loop_begin jump
    for_loop_end:

          // [l, i, s]
    swap2 // [s, i, l]
    pop   // [s, i]
    pop   // [s]

    // mstore & return
    0x00 mstore
    0x20 0x00 return
    

}