
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    // get the 4-byte function selector
    0x00 calldataload 0xE0 shr

    // jump to add1 if selector matches
    __FUNC_SIG(add1) eq add1 jumpi

    // revert otherwise
    0x00 0x00 revert

    add1:
        // we could write the logic here, but lets use a macro :)
        ADD_ONE() 
}

#define macro ADD_ONE() = takes(0) returns(0) {
    // add 1
    0x04 calldataload   // [n]
    0x01                // [n, 1]
    add                 // [n+1]

    // store in memory
    0x00 mstore         // []

    // return
    0x20 0x00 return
}

