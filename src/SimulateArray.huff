
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function pushh(uint256 num) payable returns()
#define function popp() payable returns()
#define function read(uint256 index) payable returns(uint256)
#define function length() payable returns(uint256)
#define function write(uint256 index, uint256 num) payable returns()

#define error OutOfBounds()
#define error ZeroArray()

// a cool looking storage slot to store the array length
#define constant LEN_PTR = 0xffffffff00000001ffffffff00000001ffffffff00000001ffffffff00000001

#define macro MAIN() = {
    // function selectors
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(pushh)  eq pushh_func  jumpi
    dup1 __FUNC_SIG(popp)   eq popp_func   jumpi
    dup1 __FUNC_SIG(read)   eq read_func   jumpi
    dup1 __FUNC_SIG(length) eq length_func jumpi
         __FUNC_SIG(write)  eq write_func  jumpi

    // unrecognized function
    0x00 0x00 revert

    // functions
    pushh_func:
        PUSH()
    popp_func:
        POP()
    read_func:
        READ()
    length_func:
        LENGTH()
    write_func:
        WRITE()

    // error returns
    outOfBounds_error:
        __ERROR(OutOfBounds) 0x00 mstore
        0x04 0x00 revert

   zeroArray_error:
        pop
        __ERROR(ZeroArray) 0x00 mstore
        0x04 0x00 revert
}

#define macro PUSH() = {
    LEN()             // [l]

    // store value
    0x04 calldataload // [l, v]
    dup2              // [l, v, l]
    sstore            // [l]

    // increment length
    0x01 add          // [l+1]
    [LEN_PTR] sstore  // []

    0x00 0x00 return
}

#define macro POP() = {
    LEN()             // [l]

    // revert if length is zero
    dup1 iszero       // [l, l == 0]
    zeroArray_error jumpi

    // decrement length
    0x01 swap1        // [1, l]
    sub dup1          // [l-1, l-1]
    [LEN_PTR] sstore  // [l-1]

    // load value
    sload             // [v]
    0x00 mstore       // []

    // returns value
    0x20 0x00 return
}

#define macro READ() = {
    // load index
    0x04 calldataload // [i]
    CHECK_VALID()     // [i]    (i < length)

    // return value
    sload             // [v]
    0x00 mstore       // []
    0x20 0x00 return
}

#define macro LENGTH() = {
    LEN()         // [l]
    0x00 mstore   // []
    0x20 0x00 return
}

#define macro WRITE() = {
    // load value argument
    0x24 calldataload // [v]

    // load index
    0x04 calldataload // [v, i]
    CHECK_VALID()     // [v, i]    (i < length)

    // store value
    sstore            // []

    0x00 0x00 return
}

#define macro LEN() = returns(1) {
    [LEN_PTR] sload   // [l]
    // returns:          [l]
}

#define macro CHECK_VALID() = takes(1) returns(1) {
    // takes:     [i]
    dup1       // [i, i]
    LEN()      // [i, i, l]
    gt iszero  // [i, l <= i]
    outOfBounds_error jumpi
    // returns:   [i]
}